#!/bin/bash
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

# function reset(){
#     if [ -d "$HOME/.os-code" ]; then
#         rm -rf $HOME/.os-code
#     fi
#     exit 0;
# }

function create(){
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -ne 0 ]; then
        echo "You are not logged in to an OpenShift cluster."
        exit 1
    else
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
    fi
    oc new-project os-code-$(whoami) > /dev/null 2>&1
    echo "Creating environment..."
    oc create sa os-code-$(whoami) > /dev/null 2>&1
    oc adm policy add-cluster-role-to-user cluster-admin -z os-code-$(whoami) > /dev/null 2>&1
    oc whoami --show-server | base64 > $HOME/.server.txt
    oc sa get-token os-code-$(whoami) | base64 > $HOME/.token.txt
    oc adm policy add-scc-to-user privileged -z os-code-$(whoami) > /dev/null 2>&1
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    oc project os-code-$(whoami) > /dev/null 2>&1
    oc new-app --name=code-server --strategy docker https://github.com/danielboothibm/os-code-server.git --as-deployment-config -l app=code-server | grep created
    oc create route edge --service=code-server > /dev/null 2>&1
    echo "Code server initialized..."
    oc logout > /dev/null 2>&1
    oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) > /dev/null 2>&1
    rm -rf $HOME/.usertoken.txt > /dev/null 2>&1
    echo "Server will usually take a few minutes to deploy"
    echo "Your code server will be hosted at: https://$(oc get routes -n os-code-$(whoami) code-server -o=jsonpath='{ .spec.host }')"
    echo "You can see the status of your build and access credentials by running:"
    echo "os-code status"
    exit 0;
}

function destroy(){
    if [ ! -f $HOME/.server.txt ] && [ ! -f $HOME/.token.txt ]; then
        echo "No code server configuration found."
        echo ""
        echo "Try running: "
        echo "os-code create"
        exit 1;
    fi
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -eq 0 ]; then
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
        oc whoami --show-server | base64 > $HOME/.userserver.txt
        login=true
    fi
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    echo "Deleting server..."
    oc delete all --all -n os-code-$(whoami) > /dev/null 2>&1
    oc project default > /dev/null 2>&1
    oc delete project/os-code-$(whoami) > /dev/null 2>&1
    rm $HOME/.server.txt
    rm $HOME/.token.txt
    oc logout > /dev/null 2>&1
    if [ "${login}" == "true" ]; then
        oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.userserver.txt | base64 --decode) > /dev/null 2>&1
        rm -rf $HOME/.usertoken.txt $HOME/.userserver.txt > /dev/null 2>&1
    fi
    sleep 7
    echo "Code server deleted"
    exit 0;
}

function download(){
    if [ ! -f $HOME/.server.txt ] && [ ! -f $HOME/.token.txt ]; then
        echo "No code server configuration found."
        echo ""
        echo "Try running: "
        echo "os-code create"
        exit 1;
    fi
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -eq 0 ]; then
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
        oc whoami --show-server | base64 > $HOME/.userserver.txt
        login=true
    fi
    echo "Pulling..."
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    oc project os-code-$(whoami) > /dev/null 2>&1
    rsync -a --rsh='oc rsh' $(oc -n os-code-$(whoami) get pod -l "app=code-server" -o jsonpath='{.items[*].metadata.name}'):/home/coder/projects/ $(pwd) > /dev/null 2>&1
    oc logout > /dev/null 2>&1
    if [ "${login}" == "true" ]; then
        oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.userserver.txt | base64 --decode) > /dev/null 2>&1
        rm -rf $HOME/.usertoken.txt $HOME/.userserver.txt > /dev/null 2>&1
    fi
    echo "Complete"
    exit 0;
}

function upload(){
    if [ ! -f $HOME/.server.txt ] && [ ! -f $HOME/.token.txt ]; then
        echo "No code server configuration found."
        echo ""
        echo "Try running: "
        echo "os-code create"
        exit 1;
    fi
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -eq 0 ]; then
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
        oc whoami --show-server | base64 > $HOME/.userserver.txt
        login=true
    fi
    echo "Pushing..."
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    oc project os-code-$(whoami) > /dev/null 2>&1
    rsync -a --rsh='oc rsh' $(pwd) $(oc -n os-code-$(whoami) get pod -l "app=code-server" -o jsonpath='{.items[*].metadata.name}'):/home/coder/projects > /dev/null 2>&1
    oc logout > /dev/null 2>&1
    if [ "${login}" == "true" ]; then
        oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.userserver.txt | base64 --decode) > /dev/null 2>&1
        rm -rf $HOME/.usertoken.txt $HOME/.userserver.txt > /dev/null 2>&1
    fi
    echo "Complete"
    exit 0;
}

function callOpen(){ 
    if [ ! -f $HOME/.server.txt ] && [ ! -f $HOME/.token.txt ]; then
        echo "No code server configuration found."
        echo ""
        echo "Try running: "
        echo "os-code create"
        exit 1;
    fi
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -eq 0 ]; then
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
        oc whoami --show-server | base64 > $HOME/.userserver.txt
        login=true
    fi
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    open https://$(oc get routes -n os-code-$(whoami) code-server -o=jsonpath='{ .spec.host }')
    oc logout > /dev/null 2>&1
    if [ "${login}" == "true" ]; then
        oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.userserver.txt | base64 --decode) > /dev/null 2>&1
        rm -rf $HOME/.usertoken.txt $HOME/.userserver.txt > /dev/null 2>&1
    fi
    exit 0;
}

function status(){
    if [ ! -f $HOME/.server.txt ] && [ ! -f $HOME/.token.txt ]; then
        echo "No code server configuration found."
        echo ""
        echo "Try running: "
        echo "os-code create"
        exit 1;
    fi
    oc whoami --show-token > /dev/null 2>&1
    local status=$?
    if [ ${status} -eq 0 ]; then
        oc whoami --show-token | base64 > $HOME/.usertoken.txt
        oc whoami --show-server | base64 > $HOME/.userserver.txt
        login=true
    fi
    oc login --token=$(cat $HOME/.token.txt | base64 --decode) --server=$(cat $HOME/.server.txt | base64 --decode) --insecure-skip-tls-verify="false" > /dev/null 2>&1 || { echo "login not ok. Exit code: $?"; exit 1; }
    oc project os-code-$(whoami) > /dev/null 2>&1
    echo "Build status: $(oc -n os-code-$(whoami) describe build -l "app=code-server" | grep Status | awk '{print $2}')"
    echo ""
    echo "Code server is accepting traffic at:"
    echo "https://$(oc get routes code-server -o=jsonpath='{ .spec.host }')"
    echo ""
    echo "The password to sign in is:"
    oc exec $(oc -n os-code-$(whoami) get pod -l "app=code-server" -o jsonpath='{.items[*].metadata.name}') -- cat /home/coder/.config/code-server/config.yaml | grep password: | awk '{print $2}'
    oc logout > /dev/null 2>&1
    if [ "${login}" == "true" ]; then
        oc login --token=$(cat $HOME/.usertoken.txt | base64 --decode) --server=$(cat $HOME/.userserver.txt | base64 --decode) > /dev/null 2>&1
        rm -rf $HOME/.usertoken.txt $HOME/.userserver.txt > /dev/null 2>&1
    fi
    exit 0;
}

function update(){
    echo "Pulling updates"
    cd $SCRIPTPATH
    git pull > /dev/null 2>&1
    echo "Application up to date"
    exit 0;
}

function help(){
    echo "Usage: os-code [OPTION]"
    echo ""
    echo "This client helps you create and manage a live vs-code environment hosted on OpenShift cluster."
    echo "This tool is designed to facilitate remote pair programming."
    echo ""
    echo "Options available: "
    echo "  Create     Creates a new code server on currently authenticated openshift cluster"
    echo "  Status     Shows status of code server"
    echo "  Destroy    Destroys the most recently deployed code server"
    echo "  Update     Downloads latest updates for os-code client"
    echo "  Upload     Uploads present working directory to code server"
    echo "  Download   Downloads all remote files from code server and stores them in a local directory"
    echo "  Open       Opens the code server in your default web browser"
    echo "  Reset      Resets live code server configuration from local machine"
    exit 0;
}

if [ "$1" == open ];then
    callOpen
fi

if declare -f "$1" > /dev/null
then
    "$@"
elif [ -n "$1" ]; then
    echo "Unrecognized command"
    echo ""
    echo "You can see all available options by running:"
    echo "os-code help"
    exit 1;
else
	echo "NOTE: To initialize a new code you must be authenticated with a cluster in your terminal session"
    echo ""
    echo "Options available: "
    echo "  Create (Creates a new code server on currently authenticated openshift cluster)"
    echo "  Status (Shows status of code server)"
    echo "  Destroy (Destroys the most recently deployed code server)"
    echo "  Update"
    echo "  Help"
fi

exit 0;